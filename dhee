#! /usr/bin/env python3

# Dhee
# Makes learning C/C++/D easier by simplifying the edit-compile-run-debug cycle
#
# Copyright (C) 2015, Shriramana Sharma
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.Qsci import QsciScintilla, QsciLexerCPP, QsciLexerD
from subprocess import Popen, PIPE
import tempfile
import os
import re

monospaceFont = QFont("monospace")

class CodeEditor(QsciScintilla):

    # Derived from public domain SimplePythonEditor class by Eli Bendersky (eliben@gmail.com)
    # URL: http://eli.thegreenplace.net/2011/04/01/sample-using-qscintilla-with-pyqt

    def __init__(self, parent = None):

        QsciScintilla.__init__(self, parent)

        # Current line visible with special background color
        self.setCaretLineVisible(True)
        self.setCaretLineBackgroundColor(QApplication.palette().color(QPalette.AlternateBase))

        # Other editor settings
        self.setMarginLineNumbers(0, True) # first margin to be used for line numbers
        self.setAutoIndent(True)
        self.setIndentationWidth(4)
        self.setBraceMatching(QsciScintilla.SloppyBraceMatch)

        # Templates
        self.templates = {
            "C"  : "#include <stdio.h>\nint main()\n{\n    \n}\n",
            "C++": "#include <iostream>\nint main()\n{\n    \n}\n",
            "D"  : "import std.stdio;\nvoid main()\n{\n    \n}\n"
            }
        self.template = None

        # Lexers
        cppLexer = QsciLexerCPP()
        dLexer = QsciLexerD()
        self.lexers = {"C": cppLexer, "C++": cppLexer, "D": dLexer}

    def initText(self):
        self.setText(self.template)
        self.setCursorPosition(3, 4)

    def textIsTrivial(self):
        return self.text() in ("", self.template)

    def setLanguage(self, lang):
        okToInit = self.textIsTrivial() # doing now since template will be overwritten
        self.template = self.templates[lang]
        self.setLexer(self.lexers[lang])
        if okToInit: self.initText()

    def updateFont(self): # to be called from MainWindow after setting font size
        self.setMarginsFont(monospaceFont)
        self.setMarginWidth(0, QFontMetrics(monospaceFont).width("000") + 15) # + needed for some reason...
        for lexer in self.lexers.values(): lexer.setFont(monospaceFont)

class MainWindow(QSplitter):

    def __init__(self):

        self.langs = ["C", "C++", "D"] # should be in sync with templates and lexers of CodeEditor
        self.langSuffixes = dict(zip(self.langs, [".c", ".cpp", ".d"]))
        self.langDefaultSpecs = dict(zip(self.langs, [
            ["clang -Wall -Wextra", "-o", "-lm"],
            ["clang++ -Wall -Wextra", "-o", "-lm"],
            ["dmd -w -wi", "-of", ""]
            ]))

        QSplitter.__init__(self)
        self.setWindowTitle("Dhee: Quick access to " + "|".join(self.langs))

        l = self.codeEditorLabel = QLabel("Edit&or:")
        w = self.codeEditor = CodeEditor()
        l.setBuddy(w)

        self.executeButton = QPushButton("&Execute")
        self.copyButton = QPushButton("&Copy code")
        self.clearButton = QPushButton("Clea&r code")
        self.resetButton = QPushButton("Re&set app")

        self.buttons = self.executeButton, self.copyButton, self.clearButton, self.resetButton
        self.buttonActions = self.execute, self.copy, self.askAndClear, self.askAndReset
        for b, a in zip(self.buttons, self.buttonActions):
            b.clicked.connect(a)

        l = self.buttonLayout = QHBoxLayout()
        for w in self.buttons:
            l.addWidget(w)

        self.stdoutTab = QPlainTextEdit()
        self.stderrTab = QPlainTextEdit()
        for w in self.stdoutTab, self.stderrTab:
            w.setReadOnly(True)

        l = self.fontSizeLabel = QLabel("&Font size:")
        w = self.fontSizeSpin = QSpinBox()
        w.setRange(10, 48)
        l.setBuddy(w)

        w = self.sep = QFrame()
        w.setFrameStyle(QFrame.HLine | QFrame.Raised)

        l = self.langLabel = QLabel("&Language")
        w = self.langComboBox = QComboBox()
        w.addItems(self.langs)
        l.setBuddy(w)

        e = self.langSpecEdits = [QLineEdit() for i in range(3)]

        self.langSpecWidgetGrid = [
            [self.fontSizeLabel, self.fontSizeSpin],
            [self.sep],
            [self.langLabel,          self.langComboBox, QLabel("Compiler"), e[0]],
            [QLabel("Output prefix"), e[1],              QLabel("Append"),   e[2]],
            ]

        l = QGridLayout()
        for rowNum, rowItem in enumerate(self.langSpecWidgetGrid):
            for colNum, colItem in enumerate(rowItem):
                l.addWidget(colItem, rowNum, colNum, 1, 4 if colItem is self.sep else 1)

        w = self.settingsTab = QWidget()
        w.setLayout(l)

        w = self.tabWidget = QTabWidget()
        w.addTab(self.stdoutTab, "s&tdout")
        w.addTab(self.stderrTab, "st&derr")
        w.addTab(self.settingsTab, "Settin&gs")

        self.freshSession = "Status: Fresh session"
        self.statusLabel = QLabel(self.freshSession)

        l = QVBoxLayout()
        l.addWidget(self.codeEditorLabel)
        l.addWidget(self.codeEditor)
        w = self.upperWidget = QWidget()
        w.setLayout(l)

        l = QVBoxLayout()
        l.addLayout(self.buttonLayout)
        l.addWidget(self.tabWidget)
        l.addWidget(self.statusLabel)
        w = self.lowerWidget = QWidget()
        w.setLayout(l)

        self.setOrientation(Qt.Vertical)
        self.addWidget(self.upperWidget)
        self.addWidget(self.lowerWidget)

        self.readSettings()
        self.codeEditor.textChanged.connect(self.noteCodeChange)
        self.fontSizeSpin.valueChanged[int].connect(self.setFontSize)
        self.langComboBox.currentIndexChanged[str].connect(self.setLanguage)

        for i, specEdit in enumerate(self.langSpecEdits):
            specEdit.textChanged.connect(lambda text, i = i: self.curLangSpec.__setitem__(i, text)) # default arg needed to enforce use of cur i value
        self.codeEditor.setFocus()

    def closeEvent(self, event):
        if not self.okToDiscardCode("quit"):
            event.ignore()
        self.writeSettings()

    def writeSettings(self):
        s = QSettings("Shriramana-Sharma", "Dhee")
        s.beginGroup("Language")
        s.setValue("current", self.langComboBox.currentIndex())
        for lang in self.langs:
            specs = self.langSpecs[lang]
            s.beginGroup(lang)
            s.setValue("compiler", specs[0])
            s.setValue("outputPrefix", specs[1])
            s.setValue("append", specs[2])
            s.endGroup()
        s.endGroup()
        s.beginGroup("MainWindow")
        s.setValue("pos", self.pos())
        s.setValue("splitterSizes", self.saveState())
        s.setValue("ioFontSize", self.fontSizeSpin.value())
        s.endGroup()

    def readSettings(self):
        s = QSettings("Shriramana-Sharma", "Dhee")
        s.beginGroup("Language")
        self.langComboBox.setCurrentIndex(int(s.value("current", 2)))
        self.langSpecs = {}
        for lang in self.langs:
            s.beginGroup(lang)
            specs = []; defaultSpecs = self.langDefaultSpecs[lang]
            specs.append(s.value("compiler", defaultSpecs[0]))
            specs.append(s.value("outputPrefix", defaultSpecs[1]))
            specs.append(s.value("append", defaultSpecs[2]))
            self.langSpecs[lang] = specs
            s.endGroup()
        s.endGroup()
        s.beginGroup("MainWindow")
        self.move(s.value("pos", QPoint()))
        self.restoreState(s.value("splitterSizes", QByteArray()))
        fontSize = int(s.value("ioFontSize", 10))
        self.fontSizeSpin.setValue(fontSize)
        s.endGroup()
        # following needs to be done manually at startup since signal emitted only at value change
        self.setFontSize(fontSize)
        self.setLanguage(self.langComboBox.currentText())

    def noteCodeChange(self):
        self.needToRecompile = True
        self.statusLabel.setText("Status: Code changed")

    def setLanguage(self, lang):
        self.needToRecompile = True
        self.codeEditor.setLanguage(lang)
        self.curLangSuffix = self.langSuffixes[lang]
        self.curLangSpec = self.langSpecs[lang]
        for spec, lineEdit in zip(self.curLangSpec, self.langSpecEdits):
            lineEdit.setText(spec)

    def setFontSize(self, pt):
        monospaceFont.setPointSize(pt)
        self.codeEditor.updateFont()
        for w in self.stdoutTab, self.stderrTab:
            w.setFont(monospaceFont)

    def okToDiscardCode(self, opName):
        if self.codeEditor.textIsTrivial():
            return True
        else:
            return QMessageBox.warning(self, "Dhee: Confirm {}".format(opName), "You might want to copy the code.\nReally {}?".format(opName), QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes) == QMessageBox.Yes
            # NOTE: To avoid too much irritation, the default (last parameter) is set to "yes"

    def execute(self):

        if not self.needToRecompile: return
        self.needToRecompile = False

        srcFileHandle, srcFileName = tempfile.mkstemp(suffix = self.curLangSuffix)
        binFileHandle, binFileName = tempfile.mkstemp()
        open(srcFileHandle, "w").write(self.codeEditor.text()) # close by object GC
        os.close(binFileHandle) # manual close needed else it cannot be executed

        prefix, output, suffix = self.curLangSpec
        compiler = prefix.split()
        compiler.append(output + binFileName)
        compiler.append(srcFileName)
        compiler += suffix.split()

        def run(command):
            process = Popen(command, universal_newlines = True, stdout = PIPE, stderr = PIPE)
            stdout, stderr = process.communicate()
            exitStatus = process.returncode
            return stdout, stderr, exitStatus

        self.statusLabel.setText("Status: Running compiler")
        stdout, stderr, exitStatusCompile = run(compiler)
        if exitStatusCompile == 0:
            o, e, exitStatusExec = run(binFileName)
            stdout += o ; stderr += e

        # cleanup
        # note: some compilers may leave behind object files
        suffixLen = len(self.curLangSuffix)
        srcFileNameBase = os.path.basename(srcFileName) # src.d
        moduleName = srcFileNameBase[:-suffixLen] # src
        srcObjFileName = srcFileName[:-suffixLen] + ".o" # /tmp/src.o
        binObjFileName = binFileName + ".o" # /tmp/bin.o
        for fn in srcFileName, binFileName, srcObjFileName, binObjFileName:
            if os.access(fn, os.F_OK): os.remove(fn)

        if exitStatusCompile != 0:
            statusMsg = "Error in compiling (exit status: {})".format(exitStatusCompile)
        elif exitStatusExec != 0:
            statusMsg = "Compiled successfully but error in execution (exit status: {})".format(exitStatusExec)
        else:
            statusMsg = "Compiled and executed successfully"
            if stderr != "":
                statusMsg += ", but stderr has text"

        if stderr == "":
            self.tabWidget.setCurrentIndex(0)
        else:
            self.tabWidget.setCurrentIndex(1)
            for s in srcFileName, srcFileNameBase, moduleName:
                stderr = stderr.replace(s, "<src>")
            stderr = stderr.replace(os.path.basename(binFileName), "<bin>")
        self.stdoutTab.setPlainText(stdout)
        self.stderrTab.setPlainText(stderr)
        self.statusLabel.setText("Status: " + statusMsg)

    def copy(self):
        QApplication.clipboard().setText(self.codeEditor.text())
        self.statusLabel.setText("Status: Code copied to clipboard")

    def askAndClear(self):
        if self.okToDiscardCode("clear"):
            self.codeEditor.clear()
            self.statusLabel.setText("Status: Code cleared")

    def askAndReset(self):
        if self.okToDiscardCode("reset"):
            self.codeEditor.initText()
            self.stdoutTab.setPlainText("")
            self.stderrTab.setPlainText("")
            self.statusLabel.setText(self.freshSession)

app = QApplication([])
mainWindow = MainWindow()
mainWindow.show()
app.exec_()
